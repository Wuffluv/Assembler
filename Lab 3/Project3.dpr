program EvenCheck;

{$APPTYPE CONSOLE}
  ////Как test сравнивает логическую 1 и на основании этого делается вывод, что число четное или нет

//Инструкция TEST выполняет логическое "И" (AND) между двумя операндами, не сохраняя результат.
//в моем случае, TEST AX, 1 выполняет "И" между содержимым регистра AX и значением 1.


//двоичное представление числа 1: 0000 0000 0000 0001.

//Если в регистре AX младший бит равен 1, результат операции "И" также будет равен 1,
//иначе будет равен 0. Таким образом, инструкция TEST AX, 1 фактически проверяет значение
//младшего бита в регистре AX.

//Если результат "И" равен 1, то это означает, что число в регистре AX нечетное '
//(так как младший бит установлен в 1). Если результат "И" равен 0, то число четное
//(так как младший бит равен 0).
var
  num, isEven: integer;

begin
  writeln('Enter number: ');
  readln(num);

  asm
    // Загрузка числа в регистр AX
    mov ax, word ptr num
    // Проверка на четность
    test ax, 1  // логическое И между 'ax' и '1'
    jnz @notEven    // Проверка на 0, переходит к @notEven. jnz - переход по "не нуль"
    // Если младший бит установлен - число четное
    mov isEven, 1
    jmp @done //Переходим к завершению
  @notEven:
    // Если число нечетное
    mov isEven, 0
  @done:
  end;

  if isEven = 1 then
    writeln('Number is even')
  else
    writeln('Number is not even');

  readln;
end.

